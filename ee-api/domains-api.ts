/* tslint:disable */
/* eslint-disable */
/**
 * Elastic Email REST API
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { DomainData } from '../ee-api-models';
// @ts-ignore
import { DomainDetail } from '../ee-api-models';
// @ts-ignore
import { DomainPayload } from '../ee-api-models';
// @ts-ignore
import { DomainUpdatePayload } from '../ee-api-models';
/**
 * DomainsApi - axios parameter creator
 * @export
 */
export const DomainsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Deletes configured domain from Account. Required Access Level: ModifySettings
         * @summary Delete Domain
         * @param {string} domain Name of the given domain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsByDomainDelete: async (domain: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'domain' is not null or undefined
            assertParamExists('domainsByDomainDelete', 'domain', domain)
            const localVarPath = `/domains/{domain}`
                .replace(`{${"domain"}}`, encodeURIComponent(String(domain)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "X-ElasticEmail-ApiKey", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a domain configured for this Account. Required Access Level: ViewSettings
         * @summary Load Domain
         * @param {string} domain Name of the given domain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsByDomainGet: async (domain: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'domain' is not null or undefined
            assertParamExists('domainsByDomainGet', 'domain', domain)
            const localVarPath = `/domains/{domain}`
                .replace(`{${"domain"}}`, encodeURIComponent(String(domain)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "X-ElasticEmail-ApiKey", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the specified domain. Required Access Level: ModifySettings
         * @summary Update Domain
         * @param {string} domain Name of the given domain
         * @param {DomainUpdatePayload} domainUpdatePayload Updated Domain resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsByDomainPut: async (domain: string, domainUpdatePayload: DomainUpdatePayload, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'domain' is not null or undefined
            assertParamExists('domainsByDomainPut', 'domain', domain)
            // verify required parameter 'domainUpdatePayload' is not null or undefined
            assertParamExists('domainsByDomainPut', 'domainUpdatePayload', domainUpdatePayload)
            const localVarPath = `/domains/{domain}`
                .replace(`{${"domain"}}`, encodeURIComponent(String(domain)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "X-ElasticEmail-ApiKey", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(domainUpdatePayload, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Checking if domain is from free provider, or restricted. Required Access Level: ViewSettings
         * @summary Check for domain restriction
         * @param {string} domain Name of the given domain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsByDomainRestrictedGet: async (domain: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'domain' is not null or undefined
            assertParamExists('domainsByDomainRestrictedGet', 'domain', domain)
            const localVarPath = `/domains/{domain}/restricted`
                .replace(`{${"domain"}}`, encodeURIComponent(String(domain)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "X-ElasticEmail-ApiKey", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Verifies that required DNS records exist for specified domain. Required Access Level: ModifySettings
         * @summary Verify Domain
         * @param {string} domain Name of the given domain
         * @param {string} body Tracking type used in the Tracking verification
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsByDomainVerificationPut: async (domain: string, body: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'domain' is not null or undefined
            assertParamExists('domainsByDomainVerificationPut', 'domain', domain)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('domainsByDomainVerificationPut', 'body', body)
            const localVarPath = `/domains/{domain}/verification`
                .replace(`{${"domain"}}`, encodeURIComponent(String(domain)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "X-ElasticEmail-ApiKey", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sets a verified email address as default sender. Required Access Level: ModifySettings
         * @summary Set Default
         * @param {string} email Default email sender, example: mail@yourdomain.com
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsByEmailDefaultPatch: async (email: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('domainsByEmailDefaultPatch', 'email', email)
            const localVarPath = `/domains/{email}/default`
                .replace(`{${"email"}}`, encodeURIComponent(String(email)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "X-ElasticEmail-ApiKey", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all domains configured for this Account. Required Access Level: ViewSettings
         * @summary Load Domains
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/domains`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "X-ElasticEmail-ApiKey", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add new domain to Account. Required Access Level: ModifySettings
         * @summary Add Domain
         * @param {DomainPayload} domainPayload Domain to add
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsPost: async (domainPayload: DomainPayload, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'domainPayload' is not null or undefined
            assertParamExists('domainsPost', 'domainPayload', domainPayload)
            const localVarPath = `/domains`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "X-ElasticEmail-ApiKey", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(domainPayload, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DomainsApi - functional programming interface
 * @export
 */
export const DomainsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DomainsApiAxiosParamCreator(configuration)
    return {
        /**
         * Deletes configured domain from Account. Required Access Level: ModifySettings
         * @summary Delete Domain
         * @param {string} domain Name of the given domain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async domainsByDomainDelete(domain: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.domainsByDomainDelete(domain, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DomainsApi.domainsByDomainDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a domain configured for this Account. Required Access Level: ViewSettings
         * @summary Load Domain
         * @param {string} domain Name of the given domain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async domainsByDomainGet(domain: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DomainData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.domainsByDomainGet(domain, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DomainsApi.domainsByDomainGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates the specified domain. Required Access Level: ModifySettings
         * @summary Update Domain
         * @param {string} domain Name of the given domain
         * @param {DomainUpdatePayload} domainUpdatePayload Updated Domain resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async domainsByDomainPut(domain: string, domainUpdatePayload: DomainUpdatePayload, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DomainDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.domainsByDomainPut(domain, domainUpdatePayload, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DomainsApi.domainsByDomainPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Checking if domain is from free provider, or restricted. Required Access Level: ViewSettings
         * @summary Check for domain restriction
         * @param {string} domain Name of the given domain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async domainsByDomainRestrictedGet(domain: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.domainsByDomainRestrictedGet(domain, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DomainsApi.domainsByDomainRestrictedGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Verifies that required DNS records exist for specified domain. Required Access Level: ModifySettings
         * @summary Verify Domain
         * @param {string} domain Name of the given domain
         * @param {string} body Tracking type used in the Tracking verification
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async domainsByDomainVerificationPut(domain: string, body: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DomainData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.domainsByDomainVerificationPut(domain, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DomainsApi.domainsByDomainVerificationPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Sets a verified email address as default sender. Required Access Level: ModifySettings
         * @summary Set Default
         * @param {string} email Default email sender, example: mail@yourdomain.com
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async domainsByEmailDefaultPatch(email: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DomainDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.domainsByEmailDefaultPatch(email, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DomainsApi.domainsByEmailDefaultPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns a list of all domains configured for this Account. Required Access Level: ViewSettings
         * @summary Load Domains
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async domainsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DomainDetail>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.domainsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DomainsApi.domainsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Add new domain to Account. Required Access Level: ModifySettings
         * @summary Add Domain
         * @param {DomainPayload} domainPayload Domain to add
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async domainsPost(domainPayload: DomainPayload, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DomainDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.domainsPost(domainPayload, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DomainsApi.domainsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DomainsApi - factory interface
 * @export
 */
export const DomainsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DomainsApiFp(configuration)
    return {
        /**
         * Deletes configured domain from Account. Required Access Level: ModifySettings
         * @summary Delete Domain
         * @param {string} domain Name of the given domain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsByDomainDelete(domain: string, options?: any): AxiosPromise<void> {
            return localVarFp.domainsByDomainDelete(domain, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a domain configured for this Account. Required Access Level: ViewSettings
         * @summary Load Domain
         * @param {string} domain Name of the given domain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsByDomainGet(domain: string, options?: any): AxiosPromise<DomainData> {
            return localVarFp.domainsByDomainGet(domain, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the specified domain. Required Access Level: ModifySettings
         * @summary Update Domain
         * @param {string} domain Name of the given domain
         * @param {DomainUpdatePayload} domainUpdatePayload Updated Domain resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsByDomainPut(domain: string, domainUpdatePayload: DomainUpdatePayload, options?: any): AxiosPromise<DomainDetail> {
            return localVarFp.domainsByDomainPut(domain, domainUpdatePayload, options).then((request) => request(axios, basePath));
        },
        /**
         * Checking if domain is from free provider, or restricted. Required Access Level: ViewSettings
         * @summary Check for domain restriction
         * @param {string} domain Name of the given domain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsByDomainRestrictedGet(domain: string, options?: any): AxiosPromise<boolean> {
            return localVarFp.domainsByDomainRestrictedGet(domain, options).then((request) => request(axios, basePath));
        },
        /**
         * Verifies that required DNS records exist for specified domain. Required Access Level: ModifySettings
         * @summary Verify Domain
         * @param {string} domain Name of the given domain
         * @param {string} body Tracking type used in the Tracking verification
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsByDomainVerificationPut(domain: string, body: string, options?: any): AxiosPromise<DomainData> {
            return localVarFp.domainsByDomainVerificationPut(domain, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Sets a verified email address as default sender. Required Access Level: ModifySettings
         * @summary Set Default
         * @param {string} email Default email sender, example: mail@yourdomain.com
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsByEmailDefaultPatch(email: string, options?: any): AxiosPromise<DomainDetail> {
            return localVarFp.domainsByEmailDefaultPatch(email, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all domains configured for this Account. Required Access Level: ViewSettings
         * @summary Load Domains
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsGet(options?: any): AxiosPromise<Array<DomainDetail>> {
            return localVarFp.domainsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Add new domain to Account. Required Access Level: ModifySettings
         * @summary Add Domain
         * @param {DomainPayload} domainPayload Domain to add
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsPost(domainPayload: DomainPayload, options?: any): AxiosPromise<DomainDetail> {
            return localVarFp.domainsPost(domainPayload, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DomainsApi - interface
 * @export
 * @interface DomainsApi
 */
export interface DomainsApiInterface {
    /**
     * Deletes configured domain from Account. Required Access Level: ModifySettings
     * @summary Delete Domain
     * @param {string} domain Name of the given domain
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainsApiInterface
     */
    domainsByDomainDelete(domain: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Retrieve a domain configured for this Account. Required Access Level: ViewSettings
     * @summary Load Domain
     * @param {string} domain Name of the given domain
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainsApiInterface
     */
    domainsByDomainGet(domain: string, options?: RawAxiosRequestConfig): AxiosPromise<DomainData>;

    /**
     * Updates the specified domain. Required Access Level: ModifySettings
     * @summary Update Domain
     * @param {string} domain Name of the given domain
     * @param {DomainUpdatePayload} domainUpdatePayload Updated Domain resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainsApiInterface
     */
    domainsByDomainPut(domain: string, domainUpdatePayload: DomainUpdatePayload, options?: RawAxiosRequestConfig): AxiosPromise<DomainDetail>;

    /**
     * Checking if domain is from free provider, or restricted. Required Access Level: ViewSettings
     * @summary Check for domain restriction
     * @param {string} domain Name of the given domain
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainsApiInterface
     */
    domainsByDomainRestrictedGet(domain: string, options?: RawAxiosRequestConfig): AxiosPromise<boolean>;

    /**
     * Verifies that required DNS records exist for specified domain. Required Access Level: ModifySettings
     * @summary Verify Domain
     * @param {string} domain Name of the given domain
     * @param {string} body Tracking type used in the Tracking verification
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainsApiInterface
     */
    domainsByDomainVerificationPut(domain: string, body: string, options?: RawAxiosRequestConfig): AxiosPromise<DomainData>;

    /**
     * Sets a verified email address as default sender. Required Access Level: ModifySettings
     * @summary Set Default
     * @param {string} email Default email sender, example: mail@yourdomain.com
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainsApiInterface
     */
    domainsByEmailDefaultPatch(email: string, options?: RawAxiosRequestConfig): AxiosPromise<DomainDetail>;

    /**
     * Returns a list of all domains configured for this Account. Required Access Level: ViewSettings
     * @summary Load Domains
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainsApiInterface
     */
    domainsGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<DomainDetail>>;

    /**
     * Add new domain to Account. Required Access Level: ModifySettings
     * @summary Add Domain
     * @param {DomainPayload} domainPayload Domain to add
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainsApiInterface
     */
    domainsPost(domainPayload: DomainPayload, options?: RawAxiosRequestConfig): AxiosPromise<DomainDetail>;

}

/**
 * DomainsApi - object-oriented interface
 * @export
 * @class DomainsApi
 * @extends {BaseAPI}
 */
export class DomainsApi extends BaseAPI implements DomainsApiInterface {
    /**
     * Deletes configured domain from Account. Required Access Level: ModifySettings
     * @summary Delete Domain
     * @param {string} domain Name of the given domain
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainsApi
     */
    public domainsByDomainDelete(domain: string, options?: RawAxiosRequestConfig) {
        return DomainsApiFp(this.configuration).domainsByDomainDelete(domain, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a domain configured for this Account. Required Access Level: ViewSettings
     * @summary Load Domain
     * @param {string} domain Name of the given domain
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainsApi
     */
    public domainsByDomainGet(domain: string, options?: RawAxiosRequestConfig) {
        return DomainsApiFp(this.configuration).domainsByDomainGet(domain, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the specified domain. Required Access Level: ModifySettings
     * @summary Update Domain
     * @param {string} domain Name of the given domain
     * @param {DomainUpdatePayload} domainUpdatePayload Updated Domain resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainsApi
     */
    public domainsByDomainPut(domain: string, domainUpdatePayload: DomainUpdatePayload, options?: RawAxiosRequestConfig) {
        return DomainsApiFp(this.configuration).domainsByDomainPut(domain, domainUpdatePayload, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Checking if domain is from free provider, or restricted. Required Access Level: ViewSettings
     * @summary Check for domain restriction
     * @param {string} domain Name of the given domain
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainsApi
     */
    public domainsByDomainRestrictedGet(domain: string, options?: RawAxiosRequestConfig) {
        return DomainsApiFp(this.configuration).domainsByDomainRestrictedGet(domain, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Verifies that required DNS records exist for specified domain. Required Access Level: ModifySettings
     * @summary Verify Domain
     * @param {string} domain Name of the given domain
     * @param {string} body Tracking type used in the Tracking verification
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainsApi
     */
    public domainsByDomainVerificationPut(domain: string, body: string, options?: RawAxiosRequestConfig) {
        return DomainsApiFp(this.configuration).domainsByDomainVerificationPut(domain, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sets a verified email address as default sender. Required Access Level: ModifySettings
     * @summary Set Default
     * @param {string} email Default email sender, example: mail@yourdomain.com
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainsApi
     */
    public domainsByEmailDefaultPatch(email: string, options?: RawAxiosRequestConfig) {
        return DomainsApiFp(this.configuration).domainsByEmailDefaultPatch(email, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of all domains configured for this Account. Required Access Level: ViewSettings
     * @summary Load Domains
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainsApi
     */
    public domainsGet(options?: RawAxiosRequestConfig) {
        return DomainsApiFp(this.configuration).domainsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add new domain to Account. Required Access Level: ModifySettings
     * @summary Add Domain
     * @param {DomainPayload} domainPayload Domain to add
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainsApi
     */
    public domainsPost(domainPayload: DomainPayload, options?: RawAxiosRequestConfig) {
        return DomainsApiFp(this.configuration).domainsPost(domainPayload, options).then((request) => request(this.axios, this.basePath));
    }
}

