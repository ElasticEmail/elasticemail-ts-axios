/* tslint:disable */
/* eslint-disable */
/**
 * Elastic Email REST API
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { EmailData } from '../ee-api-models';
// @ts-ignore
import { EmailJobStatus } from '../ee-api-models';
// @ts-ignore
import { EmailMessageData } from '../ee-api-models';
// @ts-ignore
import { EmailSend } from '../ee-api-models';
// @ts-ignore
import { EmailTransactionalMessageData } from '../ee-api-models';
// @ts-ignore
import { MergeEmailPayload } from '../ee-api-models';
/**
 * EmailsApi - axios parameter creator
 * @export
 */
export const EmailsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns email details for viewing or rendering. Required Access Level: None
         * @summary View Email
         * @param {string} msgid Message identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailsByMsgidViewGet: async (msgid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'msgid' is not null or undefined
            assertParamExists('emailsByMsgidViewGet', 'msgid', msgid)
            const localVarPath = `/emails/{msgid}/view`
                .replace(`{${"msgid"}}`, encodeURIComponent(String(msgid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "X-ElasticEmail-ApiKey", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get status details of an email transaction. Required Access Level: ViewReports
         * @summary Get Status
         * @param {string} transactionid Transaction identifier
         * @param {boolean} [showFailed] Include Bounced email addresses.
         * @param {boolean} [showSent] Include Sent email addresses.
         * @param {boolean} [showDelivered] Include all delivered email addresses.
         * @param {boolean} [showPending] Include Ready to send email addresses.
         * @param {boolean} [showOpened] Include Opened email addresses.
         * @param {boolean} [showClicked] Include Clicked email addresses.
         * @param {boolean} [showAbuse] Include Reported as abuse email addresses.
         * @param {boolean} [showUnsubscribed] Include Unsubscribed email addresses.
         * @param {boolean} [showErrors] Include error messages for bounced emails.
         * @param {boolean} [showMessageIDs] Include all MessageIDs for this transaction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailsByTransactionidStatusGet: async (transactionid: string, showFailed?: boolean, showSent?: boolean, showDelivered?: boolean, showPending?: boolean, showOpened?: boolean, showClicked?: boolean, showAbuse?: boolean, showUnsubscribed?: boolean, showErrors?: boolean, showMessageIDs?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transactionid' is not null or undefined
            assertParamExists('emailsByTransactionidStatusGet', 'transactionid', transactionid)
            const localVarPath = `/emails/{transactionid}/status`
                .replace(`{${"transactionid"}}`, encodeURIComponent(String(transactionid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "X-ElasticEmail-ApiKey", configuration)

            if (showFailed !== undefined) {
                localVarQueryParameter['showFailed'] = showFailed;
            }

            if (showSent !== undefined) {
                localVarQueryParameter['showSent'] = showSent;
            }

            if (showDelivered !== undefined) {
                localVarQueryParameter['showDelivered'] = showDelivered;
            }

            if (showPending !== undefined) {
                localVarQueryParameter['showPending'] = showPending;
            }

            if (showOpened !== undefined) {
                localVarQueryParameter['showOpened'] = showOpened;
            }

            if (showClicked !== undefined) {
                localVarQueryParameter['showClicked'] = showClicked;
            }

            if (showAbuse !== undefined) {
                localVarQueryParameter['showAbuse'] = showAbuse;
            }

            if (showUnsubscribed !== undefined) {
                localVarQueryParameter['showUnsubscribed'] = showUnsubscribed;
            }

            if (showErrors !== undefined) {
                localVarQueryParameter['showErrors'] = showErrors;
            }

            if (showMessageIDs !== undefined) {
                localVarQueryParameter['showMessageIDs'] = showMessageIDs;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Send to a list of contacts submitted in a CSV data file. The first column in the CSV must be the email address and the CSV must contain a header row. Additional fields can be included with a named header row and can be merged with the template using {merge} tags in the content.                           Example CSV:                           email, firstname, lastname              test1@gmail.com, michael, smith              test2@gmail.com, janet, smith                           Merge file must not be empty. Required Access Level: SendHttp
         * @summary Send Bulk Emails CSV
         * @param {MergeEmailPayload} mergeEmailPayload Email data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailsMergefilePost: async (mergeEmailPayload: MergeEmailPayload, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mergeEmailPayload' is not null or undefined
            assertParamExists('emailsMergefilePost', 'mergeEmailPayload', mergeEmailPayload)
            const localVarPath = `/emails/mergefile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "X-ElasticEmail-ApiKey", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mergeEmailPayload, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Send bulk merge email. Required Access Level: SendHttp
         * @summary Send Bulk Emails
         * @param {EmailMessageData} emailMessageData Email data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailsPost: async (emailMessageData: EmailMessageData, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'emailMessageData' is not null or undefined
            assertParamExists('emailsPost', 'emailMessageData', emailMessageData)
            const localVarPath = `/emails`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "X-ElasticEmail-ApiKey", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(emailMessageData, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Send transactional emails (recipients will be known to each other). Required Access Level: SendHttp
         * @summary Send Transactional Email
         * @param {EmailTransactionalMessageData} emailTransactionalMessageData Email data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailsTransactionalPost: async (emailTransactionalMessageData: EmailTransactionalMessageData, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'emailTransactionalMessageData' is not null or undefined
            assertParamExists('emailsTransactionalPost', 'emailTransactionalMessageData', emailTransactionalMessageData)
            const localVarPath = `/emails/transactional`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "X-ElasticEmail-ApiKey", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(emailTransactionalMessageData, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmailsApi - functional programming interface
 * @export
 */
export const EmailsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EmailsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns email details for viewing or rendering. Required Access Level: None
         * @summary View Email
         * @param {string} msgid Message identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async emailsByMsgidViewGet(msgid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.emailsByMsgidViewGet(msgid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EmailsApi.emailsByMsgidViewGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get status details of an email transaction. Required Access Level: ViewReports
         * @summary Get Status
         * @param {string} transactionid Transaction identifier
         * @param {boolean} [showFailed] Include Bounced email addresses.
         * @param {boolean} [showSent] Include Sent email addresses.
         * @param {boolean} [showDelivered] Include all delivered email addresses.
         * @param {boolean} [showPending] Include Ready to send email addresses.
         * @param {boolean} [showOpened] Include Opened email addresses.
         * @param {boolean} [showClicked] Include Clicked email addresses.
         * @param {boolean} [showAbuse] Include Reported as abuse email addresses.
         * @param {boolean} [showUnsubscribed] Include Unsubscribed email addresses.
         * @param {boolean} [showErrors] Include error messages for bounced emails.
         * @param {boolean} [showMessageIDs] Include all MessageIDs for this transaction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async emailsByTransactionidStatusGet(transactionid: string, showFailed?: boolean, showSent?: boolean, showDelivered?: boolean, showPending?: boolean, showOpened?: boolean, showClicked?: boolean, showAbuse?: boolean, showUnsubscribed?: boolean, showErrors?: boolean, showMessageIDs?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailJobStatus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.emailsByTransactionidStatusGet(transactionid, showFailed, showSent, showDelivered, showPending, showOpened, showClicked, showAbuse, showUnsubscribed, showErrors, showMessageIDs, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EmailsApi.emailsByTransactionidStatusGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Send to a list of contacts submitted in a CSV data file. The first column in the CSV must be the email address and the CSV must contain a header row. Additional fields can be included with a named header row and can be merged with the template using {merge} tags in the content.                           Example CSV:                           email, firstname, lastname              test1@gmail.com, michael, smith              test2@gmail.com, janet, smith                           Merge file must not be empty. Required Access Level: SendHttp
         * @summary Send Bulk Emails CSV
         * @param {MergeEmailPayload} mergeEmailPayload Email data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async emailsMergefilePost(mergeEmailPayload: MergeEmailPayload, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailSend>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.emailsMergefilePost(mergeEmailPayload, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EmailsApi.emailsMergefilePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Send bulk merge email. Required Access Level: SendHttp
         * @summary Send Bulk Emails
         * @param {EmailMessageData} emailMessageData Email data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async emailsPost(emailMessageData: EmailMessageData, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailSend>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.emailsPost(emailMessageData, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EmailsApi.emailsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Send transactional emails (recipients will be known to each other). Required Access Level: SendHttp
         * @summary Send Transactional Email
         * @param {EmailTransactionalMessageData} emailTransactionalMessageData Email data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async emailsTransactionalPost(emailTransactionalMessageData: EmailTransactionalMessageData, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailSend>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.emailsTransactionalPost(emailTransactionalMessageData, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EmailsApi.emailsTransactionalPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * EmailsApi - factory interface
 * @export
 */
export const EmailsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EmailsApiFp(configuration)
    return {
        /**
         * Returns email details for viewing or rendering. Required Access Level: None
         * @summary View Email
         * @param {string} msgid Message identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailsByMsgidViewGet(msgid: string, options?: any): AxiosPromise<EmailData> {
            return localVarFp.emailsByMsgidViewGet(msgid, options).then((request) => request(axios, basePath));
        },
        /**
         * Get status details of an email transaction. Required Access Level: ViewReports
         * @summary Get Status
         * @param {string} transactionid Transaction identifier
         * @param {boolean} [showFailed] Include Bounced email addresses.
         * @param {boolean} [showSent] Include Sent email addresses.
         * @param {boolean} [showDelivered] Include all delivered email addresses.
         * @param {boolean} [showPending] Include Ready to send email addresses.
         * @param {boolean} [showOpened] Include Opened email addresses.
         * @param {boolean} [showClicked] Include Clicked email addresses.
         * @param {boolean} [showAbuse] Include Reported as abuse email addresses.
         * @param {boolean} [showUnsubscribed] Include Unsubscribed email addresses.
         * @param {boolean} [showErrors] Include error messages for bounced emails.
         * @param {boolean} [showMessageIDs] Include all MessageIDs for this transaction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailsByTransactionidStatusGet(transactionid: string, showFailed?: boolean, showSent?: boolean, showDelivered?: boolean, showPending?: boolean, showOpened?: boolean, showClicked?: boolean, showAbuse?: boolean, showUnsubscribed?: boolean, showErrors?: boolean, showMessageIDs?: boolean, options?: any): AxiosPromise<EmailJobStatus> {
            return localVarFp.emailsByTransactionidStatusGet(transactionid, showFailed, showSent, showDelivered, showPending, showOpened, showClicked, showAbuse, showUnsubscribed, showErrors, showMessageIDs, options).then((request) => request(axios, basePath));
        },
        /**
         * Send to a list of contacts submitted in a CSV data file. The first column in the CSV must be the email address and the CSV must contain a header row. Additional fields can be included with a named header row and can be merged with the template using {merge} tags in the content.                           Example CSV:                           email, firstname, lastname              test1@gmail.com, michael, smith              test2@gmail.com, janet, smith                           Merge file must not be empty. Required Access Level: SendHttp
         * @summary Send Bulk Emails CSV
         * @param {MergeEmailPayload} mergeEmailPayload Email data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailsMergefilePost(mergeEmailPayload: MergeEmailPayload, options?: any): AxiosPromise<EmailSend> {
            return localVarFp.emailsMergefilePost(mergeEmailPayload, options).then((request) => request(axios, basePath));
        },
        /**
         * Send bulk merge email. Required Access Level: SendHttp
         * @summary Send Bulk Emails
         * @param {EmailMessageData} emailMessageData Email data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailsPost(emailMessageData: EmailMessageData, options?: any): AxiosPromise<EmailSend> {
            return localVarFp.emailsPost(emailMessageData, options).then((request) => request(axios, basePath));
        },
        /**
         * Send transactional emails (recipients will be known to each other). Required Access Level: SendHttp
         * @summary Send Transactional Email
         * @param {EmailTransactionalMessageData} emailTransactionalMessageData Email data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailsTransactionalPost(emailTransactionalMessageData: EmailTransactionalMessageData, options?: any): AxiosPromise<EmailSend> {
            return localVarFp.emailsTransactionalPost(emailTransactionalMessageData, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EmailsApi - interface
 * @export
 * @interface EmailsApi
 */
export interface EmailsApiInterface {
    /**
     * Returns email details for viewing or rendering. Required Access Level: None
     * @summary View Email
     * @param {string} msgid Message identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailsApiInterface
     */
    emailsByMsgidViewGet(msgid: string, options?: RawAxiosRequestConfig): AxiosPromise<EmailData>;

    /**
     * Get status details of an email transaction. Required Access Level: ViewReports
     * @summary Get Status
     * @param {string} transactionid Transaction identifier
     * @param {boolean} [showFailed] Include Bounced email addresses.
     * @param {boolean} [showSent] Include Sent email addresses.
     * @param {boolean} [showDelivered] Include all delivered email addresses.
     * @param {boolean} [showPending] Include Ready to send email addresses.
     * @param {boolean} [showOpened] Include Opened email addresses.
     * @param {boolean} [showClicked] Include Clicked email addresses.
     * @param {boolean} [showAbuse] Include Reported as abuse email addresses.
     * @param {boolean} [showUnsubscribed] Include Unsubscribed email addresses.
     * @param {boolean} [showErrors] Include error messages for bounced emails.
     * @param {boolean} [showMessageIDs] Include all MessageIDs for this transaction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailsApiInterface
     */
    emailsByTransactionidStatusGet(transactionid: string, showFailed?: boolean, showSent?: boolean, showDelivered?: boolean, showPending?: boolean, showOpened?: boolean, showClicked?: boolean, showAbuse?: boolean, showUnsubscribed?: boolean, showErrors?: boolean, showMessageIDs?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<EmailJobStatus>;

    /**
     * Send to a list of contacts submitted in a CSV data file. The first column in the CSV must be the email address and the CSV must contain a header row. Additional fields can be included with a named header row and can be merged with the template using {merge} tags in the content.                           Example CSV:                           email, firstname, lastname              test1@gmail.com, michael, smith              test2@gmail.com, janet, smith                           Merge file must not be empty. Required Access Level: SendHttp
     * @summary Send Bulk Emails CSV
     * @param {MergeEmailPayload} mergeEmailPayload Email data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailsApiInterface
     */
    emailsMergefilePost(mergeEmailPayload: MergeEmailPayload, options?: RawAxiosRequestConfig): AxiosPromise<EmailSend>;

    /**
     * Send bulk merge email. Required Access Level: SendHttp
     * @summary Send Bulk Emails
     * @param {EmailMessageData} emailMessageData Email data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailsApiInterface
     */
    emailsPost(emailMessageData: EmailMessageData, options?: RawAxiosRequestConfig): AxiosPromise<EmailSend>;

    /**
     * Send transactional emails (recipients will be known to each other). Required Access Level: SendHttp
     * @summary Send Transactional Email
     * @param {EmailTransactionalMessageData} emailTransactionalMessageData Email data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailsApiInterface
     */
    emailsTransactionalPost(emailTransactionalMessageData: EmailTransactionalMessageData, options?: RawAxiosRequestConfig): AxiosPromise<EmailSend>;

}

/**
 * EmailsApi - object-oriented interface
 * @export
 * @class EmailsApi
 * @extends {BaseAPI}
 */
export class EmailsApi extends BaseAPI implements EmailsApiInterface {
    /**
     * Returns email details for viewing or rendering. Required Access Level: None
     * @summary View Email
     * @param {string} msgid Message identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailsApi
     */
    public emailsByMsgidViewGet(msgid: string, options?: RawAxiosRequestConfig) {
        return EmailsApiFp(this.configuration).emailsByMsgidViewGet(msgid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get status details of an email transaction. Required Access Level: ViewReports
     * @summary Get Status
     * @param {string} transactionid Transaction identifier
     * @param {boolean} [showFailed] Include Bounced email addresses.
     * @param {boolean} [showSent] Include Sent email addresses.
     * @param {boolean} [showDelivered] Include all delivered email addresses.
     * @param {boolean} [showPending] Include Ready to send email addresses.
     * @param {boolean} [showOpened] Include Opened email addresses.
     * @param {boolean} [showClicked] Include Clicked email addresses.
     * @param {boolean} [showAbuse] Include Reported as abuse email addresses.
     * @param {boolean} [showUnsubscribed] Include Unsubscribed email addresses.
     * @param {boolean} [showErrors] Include error messages for bounced emails.
     * @param {boolean} [showMessageIDs] Include all MessageIDs for this transaction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailsApi
     */
    public emailsByTransactionidStatusGet(transactionid: string, showFailed?: boolean, showSent?: boolean, showDelivered?: boolean, showPending?: boolean, showOpened?: boolean, showClicked?: boolean, showAbuse?: boolean, showUnsubscribed?: boolean, showErrors?: boolean, showMessageIDs?: boolean, options?: RawAxiosRequestConfig) {
        return EmailsApiFp(this.configuration).emailsByTransactionidStatusGet(transactionid, showFailed, showSent, showDelivered, showPending, showOpened, showClicked, showAbuse, showUnsubscribed, showErrors, showMessageIDs, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Send to a list of contacts submitted in a CSV data file. The first column in the CSV must be the email address and the CSV must contain a header row. Additional fields can be included with a named header row and can be merged with the template using {merge} tags in the content.                           Example CSV:                           email, firstname, lastname              test1@gmail.com, michael, smith              test2@gmail.com, janet, smith                           Merge file must not be empty. Required Access Level: SendHttp
     * @summary Send Bulk Emails CSV
     * @param {MergeEmailPayload} mergeEmailPayload Email data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailsApi
     */
    public emailsMergefilePost(mergeEmailPayload: MergeEmailPayload, options?: RawAxiosRequestConfig) {
        return EmailsApiFp(this.configuration).emailsMergefilePost(mergeEmailPayload, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Send bulk merge email. Required Access Level: SendHttp
     * @summary Send Bulk Emails
     * @param {EmailMessageData} emailMessageData Email data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailsApi
     */
    public emailsPost(emailMessageData: EmailMessageData, options?: RawAxiosRequestConfig) {
        return EmailsApiFp(this.configuration).emailsPost(emailMessageData, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Send transactional emails (recipients will be known to each other). Required Access Level: SendHttp
     * @summary Send Transactional Email
     * @param {EmailTransactionalMessageData} emailTransactionalMessageData Email data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailsApi
     */
    public emailsTransactionalPost(emailTransactionalMessageData: EmailTransactionalMessageData, options?: RawAxiosRequestConfig) {
        return EmailsApiFp(this.configuration).emailsTransactionalPost(emailTransactionalMessageData, options).then((request) => request(this.axios, this.basePath));
    }
}

